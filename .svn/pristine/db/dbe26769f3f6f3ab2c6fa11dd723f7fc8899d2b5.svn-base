function [ OutputResult ] = releasePathTry( TotalResult,satId,Cus2CusDist,Sat2CusDist,Sat2SatDist,Center2SatDist,Demand,QUESTIONOpts,CusPos )
OutputResult=TotalResult;
pathNum=size(TotalResult{1,2}{satId,1},1);
actPathNum=0;
%find the least path in satId
PathCusNum=zeros(pathNum,1);
actPathList=zeros(pathNum,1);
for i=1:pathNum
    if size(TotalResult{1,2}{satId,1}{i,1},1)==0 || size(TotalResult{1,2}{satId,1}{i,1},2)==0
        PathCusNum(i,1)=+inf;
    else
        PathCusNum(i,1)=size(TotalResult{1,2}{satId,1}{i,1},1);
        actPathNum=actPathNum+1;
        actPathList(actPathNum,1)=i;
    end
end
minPathId=find(PathCusNum==min(PathCusNum),1);
minPath=TotalResult{1,2}{satId,1}{minPathId,1};
minPathCusNum=size(minPath,1);
actPathList=actPathList(1:actPathNum);
actPathList(find(actPathList==minPathId,1),:)=[];
actPathNum=actPathNum-1;

if minPathCusNum>3
    return;
end
%check the rest space in other path
PathRestSpace=zeros(pathNum,1);
totalRest=0;
for i=1:actPathNum
    tCusNum=size(TotalResult{1,2}{satId,1}{actPathList(i,1),1},1);
    tLoad=0;
    if tCusNum>0
        for j=1:tCusNum
            tLoad=tLoad+Demand(TotalResult{1,2}{satId,1}{actPathList(i,1),1}(j),1);
        end
    end
    PathRestSpace(actPathList(i,1),1)=QUESTIONOpts.L2Capacity-tLoad;
    totalRest=totalRest+PathRestSpace(actPathList(i,1),1);
end

%if no enough space
if totalRest<QUESTIONOpts.L2Capacity-PathRestSpace(minPathId,1)
    return;
end

%if pathNum smaller than cusNum
if actPathNum<minPathCusNum
    return;
end

minFit=+inf;
%del
TotalResult{1,2}{satId,1}{minPathId,1}=[];
%insert trying
if minPathCusNum==1
    %try every path
    for i=1:actPathNum 
        if Demand(minPath(1),1)<=PathRestSpace(actPathList(i,1),1)
            cusId=minPath(1);
            %add(try every pos)
            desPathCusNum=size(TotalResult{1,2}{satId,1}{actPathList(i,1),1},1);
            for j=1:desPathCusNum+1
                Temp=TotalResult;
                tempPath=Temp{1,2}{satId,1}{actPathList(i,1),1};
                if j==1
                    tempPath=[cusId;tempPath];
                elseif j==desPathCusNum+1
                    tempPath=[tempPath;cusId];
                else
                    tempPath=[tempPath(1:j-1,:);cusId;tempPath(j:desPathCusNum,:)];
                end
                Temp{1,2}{satId,1}{actPathList(i,1),1}=tempPath;
                tempFit=fitness(Temp,Cus2CusDist,Sat2CusDist,Sat2SatDist,Center2SatDist);
                if tempFit<minFit
                    Temp{1,3}=tempFit;
                    OutputResult=Temp;
                    minFit=tempFit;
                end
            end
        end
    end
% else
%     tryTimes=prod(1:actPathNum)/prod(1:(actPathNum-minPathCusNum));
%     memR=[];memNum=0;memFit=zeros(tryTimes,1);memResult=cell(tryTimes,1);
%     %list out all possibility
%     nc=nchoosek(actPathList,minPathCusNum);
%     for i=1:size(nc,1)
%         memR=[memR;perms(nc(i,:))];
%     end
%     for i=1:size(memR,1)
%         minPosResult=TotalResult;
%         for j=1:minPathCusNum
%             if PathRestSpace(memR(i,j),1)<Demand(minPath(j,1),1)
%                 memFit(i,1)=+inf;
%                 break;
%             end
%             minPosFit=+inf;
%             cusId=minPath(j,1);
%             %add(try every pos)
%             desPathCusNum=size(TotalResult{1,2}{satId,1}{memR(i,j),1},1);
%             for k=1:desPathCusNum+1
%                 Temp=minPosResult;
%                 tempPath=Temp{1,2}{satId,1}{memR(i,j),1};
%                 if k==1
%                     tempPath=[cusId;tempPath];
%                 elseif k==desPathCusNum+1
%                     tempPath=[tempPath;cusId];
%                 else
%                     tempPath=[tempPath(1:k-1,:);cusId;tempPath(k:desPathCusNum,:)];
%                 end
%                 Temp{1,2}{satId,1}{memR(i,j),1}=tempPath;
%                 tempFit=fitness(Temp,Cus2CusDist,Sat2CusDist,Sat2SatDist,Center2SatDist);
%                 if tempFit<minPosFit
%                     Temp{1,3}=tempFit;
%                     minPosResult=Temp;
%                     minPosFit=tempFit;
%                 end
%             end
%         end
%         memResult{i,1}=minPosResult;
%     end
%     memFit=memFit(1:size(memR,1),1);
%     minIndex=find(memFit==min(memFit),1);
%     if memFit(minIndex)==+inf
%         return
%     end
%     OutputResult=memResult{minIndex,1};
end


